# Platform-Environments_As_Managed_Service

## Overview

This decision preparation document addresses the concept of providing different types of environments to the organization as a managed service. The platform team will be the primary owner and provider of these environments, with platform tenant teams offering specialized services on top of the core platform infrastructure.

The Cloud Adoption Team (CAT) will play a crucial role in this approach, assisting teams in their cloud adoption journey and providing scalable support for the managed service.

## Impact

Implementing environments as a managed service will significantly impact:

- Resource allocation and management
- Standardization of environment configurations
- Security and compliance adherence
- Team responsibilities and workflows
- Cost management and optimization
- Scalability and flexibility of the organization's infrastructure

## Key Considerations

- Defining clear roles and responsibilities for the platform team and platform tenant teams
- Ensuring scalability to accommodate future growth and changing requirements
- Implementing secure and functional environments
- Finops and financial reporting
- Tooling ecosystem - integration, design and consolidation
- Phased approach adhereing to MVP approach

## Stateholders

| Stakeholder | Role/Department |
| ----------- | --------------- |
|             |                 |

## Background Information

This document proposes implementing a managed service approach for environment provisioning and management. This approach would leverage the expertise of a dedicated platform team to provide a standardized, secure, and efficient infrastructure. Platform tenant teams, such as DevSecOps, IAM, and NetSec, would augment this service with specialized capabilities.

Centralizing environment management through this proposed approach aims to achieve better control, optimization, and alignment with organizational goals. This strategy could potentially reduce security risks, improve efficiency, and optimize costs associated with environment provisioning and management.

## Proposal

This document proposes a collaborative approach to environment management, where the platform team and platform tenant teams work together to provide services and capabilities that enable each environment to accomplish its mission and deliver value to the organization.

Key aspects of the proposal:

1. **Collaborative Service Delivery**: The platform team and platform tenant teams will jointly provide services and capabilities that, when combined, enable each environment to fulfill its purpose and provide necessary services to the organization.

2. **Environment-Specific Design**: Each environment's function and purpose will be thoroughly understood, documented, and designed to meet its specific objectives.

3. **Continuous Feedback Loop**: The service will maintain ongoing communication with business stakeholders, technology stakeholders, application development teams, and platform tenant teams to ensure that both business and technical requirements are met, and that the service is delivered with an acceptable level of quality and capability.

4. **Scalable Abstraction**: The level of service provided will be designed to scale and be abstracted with reasonable assistance from the Cloud Adoption Team (CAT). The CAT will be responsible for aiding teams in their cloud adoption journey.

5. **Long-term Simplification**: The long-term goal is to abstract and simplify the platforms to the point where, after an initial adoption engagement, each team should be able to manage its relatively simple infrastructure-as-code burden. This will be achieved using Pulumi and CI/CD code, with teams having some control within the framework of the platform's structure.

6. **Continuous Improvement**: The service will evolve based on feedback and changing requirements, always aiming to improve efficiency, security, and value delivery.

7. **Metrics and Evaluation**: While not part of the initial MVP phase, the long-term goal is to establish key performance indicators (KPIs) and success metrics to measure the effectiveness of this managed service approach.

8. **Governance Model**: A lightweight governance framework will be established to ensure consistency and adherence to best practices across environments, while still allowing for necessary flexibility.

Benefits:

- Standardized yet flexible environment management
- Improved collaboration between platform team and tenant teams
- Scalable and efficient cloud adoption process
- Gradual empowerment of individual teams to manage their infrastructure
- Alignment of environment capabilities with business and technical requirements

Challenges:

- Initial complexity in setting up
- Potential learning curve for teams and the organization
- Balancing standardization with individual team needs
- Ensuring consistent governance across diverse environments
- Balancing security with functional requirements of environments

This proposal aims to create a robust, scalable, and flexible approach to environment management that evolves with the organization's needs and technological advancements.

## Service Level Expectations

It's crucial to recognize that each environment, despite being an internal concept, should be treated as a critical service to our internal customers. If an environment is unable to meet its intended function, it should be considered degraded or down, just like any external product or service. This includes scenarios where environments are not fulfilling their function with the efficiency and ease of use required by the customers.

Key points:

1. **Functional Requirements**: Each environment must meet its defined functional requirements to be considered operational.

2. **Internal Customer Focus**: Failure to meet these standards should be treated as a service failure to our internal customers.

3. **Improvement Process**: A clear process for addressing and resolving environment degradation or failures should be established.

This approach ensures that we maintain high standards for our internal services, ultimately contributing to the overall efficiency and effectiveness of our organization's operations.

## References

- CONVENTIONS.md: Platform Engineering Documentation Conventions
- DPD_TEMPLATE.md: Decision Preparation Document Template

## Related Documents

This DPD may be referenced by or relevant to the following types of documents:

- Environment management strategies
- Platform team and platform tenant teams' roles and responsibilities
- Infrastructure provisioning and management documentation
- IT operations or cloud services strategic planning documents

---

# Environment Strategy - Grouping and Naming Conventions

## Overview

We need to decide on a naming convention and grouping strategy for our environments to facilitate policy application, organizational clarity, and effective communication among teams. Specifically, we aim to:

- Group environments based on their purpose and characteristics.
- Assign common policies to these groups.
- Name these groups in a way that is clear, industry-aligned, and unambiguous.

## Scope

The purpose of this document is to propose a domain structure and naming concept for our environments. While it mentions related concepts such as policy types and other aspects of domains and environments, this document is solely focused on introducing the structural organization of environments. Accepting this proposal means agreeing to the proposed structure and organization of environments. Other concepts and policies mentioned here should be the subject of their own separate decisions.

## Impact

Choosing appropriate names and grouping for our environments will:

- **Enhance Communication**: Clear naming conventions reduce confusion and improve collaboration between teams.
- **Simplify Policy Management**: Grouping similar environments allows for efficient policy application and maintenance. It also gives better names to refer to within policy documents.
- **Support Organizational Growth**: A well-structured environment strategy accommodates future scaling and changes.
- **Improve Security and Compliance**: Consistent policies across environment groups help maintain security standards.

## Key Considerations

- **Avoid Ambiguity**: Especially with terms like "production" to prevent confusion.
- **Industry Alignment**: Use terminology that is recognized and understood in the industry.
- **Intuitive Naming**: Ensure names are clear for both existing and new team members.
- **Policy Application**: Groups should facilitate the application of overarching and specific policies.
- **Stakeholder Buy-in**: Names and structures should be acceptable to all relevant stakeholders.
- **Scalability**: The grouping strategy should accommodate future growth.

## Stakeholders

| Stakeholder | Role/Department |
| ----------- | --------------- |
|             |                 |

## Background Information

Organizations benefit from a structured approach to manage different environments used in the software integration, delivery and platform services. Having a clear, unambiguous term for grouping environments is crucial for effective internal communication and management.

We propose grouping environments into distinct categories to:

- Enhance clarity in communication about environment purposes and characteristics.
- Facilitate the application of specific policies appropriate to each group.
- Accomidate fine-grained policy control even to a specific environment.
- Avoid redundancy/duplication of policy.
- Improve efficiency and clarity in environment management and utilization.

By establishing a well-defined grouping strategy, we can:

- Increase consistency in how environments are referred to and managed.
- Reduce ambiguity and reduce confusion about environment purposes and policies.
- Support more organized/structured policy implementation and management.

## Proposal: Environment Grouping Strategy

We propose grouping our environments into three distinct categories, each serving a specific purpose in our development and deployment lifecycle.

### Naming Options

We have several options for naming these groupings:

1. **"Domain" as Grouping Term**:

   - Prototype Domain (or Platform Design Domain / Platform Sandbox)
   - Integration Domain
   - Apex Domain (or Core Domain / Critical Domain)

2. **Alternative Terms to Replace Domain**:
   - Consider "Realm" or "Segment" instead of "Domain"
   - Examples: Prototype Realm/Segment, Integration Realm/Segment, Apex Realm/Segment

### Pros and Cons

Pros:

- Clear hierarchy and distinct names
- Facilitates policy management
- Aligns with industry standards (depending on chosen terminology)
- Avoids having terms like "Production" being used to describe environments that are not production.
- Consistant internal alignment on terms that appear to be missing from the industry where the concepts are difficult to or take time to describe.

Cons:

- Some terms may be unfamiliar, requiring an adjustment period
- Certain naming options may not fully capture unique characteristics of each grouping

## Policy Considerations

The types of policies that can apply at both the domain and environment levels are essentially the same. The main difference lies in their scope of application. Some policies might apply to an entire domain, while others are specific to a particular environment within a domain.

### Policy Types

1. **Access Control**: Defining who can access environments and what level of permissions they have.
2. **Security Standards**: Security requirements for environments.
3. **Compliance Requirements**: Regulatory and internal compliance standards that must be met.
4. **Resource Allocation**: Guidelines for resource provisioning and scaling.
5. **Monitoring and Logging**: Monitoring and logging practices.
6. **Data Governance**: Rules for data handling, including data classification and usage guidelines.
7. **Change Management**: Processes for making changes to environments.
8. **Disaster Recovery**: Procedures for backup, recovery, and business continuity.
9. **Cost Management**: Policies for controlling and optimizing costs.

### Domain-Level Policies

Domain-level policies apply to all environments within a specific domain. For example:

- A policy prohibiting the use of production data might apply to all non-Apex domains.
- Security baselines might be set at the domain level, with stricter requirements for the Apex domain.

### Environment-Specific Policies

Environment-specific policies are more granular and tailored to the unique needs of individual environments. These may include:

1. **Unique Purpose Policies**: Tailored policies for specific environment purposes (e.g., performance testing environments).
2. **Variable Security Policies**: Stricter security policies for production environments.
3. **Specific Compliance Policies**: Adherence to specific compliance requirements for certain environments.
4. **Operational Flexibility Policies**: More flexible policies for development environments to facilitate rapid iteration.
5. **Detailed Data Usage Policies**: Specific rules about data types that can be used or stored in each environment.

By implementing both domain-level and environment-specific policies, we can ensure a balance between consistency across domains and flexibility for individual environments. This approach allows for efficient management while meeting the unique needs of each domain and environment.

## Questions for Discussion

-

## Next Steps

1.

## References

- **CONVENTIONS.md**: Platform Engineering Documentation Conventions.
- **DPD_TEMPLATE.md**: Decision Preparation Document Template.
- Industry best practices on environment management.

## Action Items and Outstanding Research

-

## Decision Outcome

_To be filled after the decision is made._

---

# Environment Policy Types

## Overview

This Decision Preparation Document (DPD) aims to define the types of policies needed to govern our various environments effectively. These policies will ensure consistency, security, and efficiency across our platform.

## Scope

The purpose of this document is to establish that there will be policy types for environments and to provide a starting point for these categories of policy types. This proposal outlines initial policy type buckets, with the understanding that additional types can be added in the future as needed. It's important to note that this document does not extend its scope to the definition of any specific policies; rather, it sets the framework for future policy development.

## Impact

Establishing clear policy types will:

- Provide a framework for creating specific policies
- Ensure comprehensive coverage of all aspects of environment management
- Facilitate easier policy creation, implementation, and enforcement

## Key Considerations

- Alignment with our environment domains and definitions
- Comprehensive coverage of all aspects of environment management
- Flexibility to accommodate different needs across environments
- Ease of implementation and enforcement

## Stakeholders

| Stakeholder | Role/Department |
| ----------- | --------------- |
|             |                 |

## Background Information

Our organization benefits from a structured approach to policy creation and management for our various environments. These policy types serve as a comprehensive framework for developing specific policies that govern how our environments are used, secured, and maintained. By defining a clear set of policy types, we can:

1. Better organize and categorize our policies
2. Evaluate the completeness and coverage of our policy landscape
3. More effectively determine and manage the differences in configurations across our environments
4. Ensure consistency in policy application while allowing for necessary variations
5. Facilitate easier policy creation, implementation, and enforcement
6. Provide a clear structure for policy review and updates

This structured approach enhances our ability to maintain a secure, efficient, and compliant environment ecosystem.

## Proposals

### Proposed Policy Types

The following policy types will be defined as global standards, outside of this document. However, if any of these policies have environment/domain-specific exceptions or clarifications, this document proposes that they they should be documented as a domain/environment policy under one of these types to better define each environment/domain.

1. **Access Control Policies**

2. **Security Policies**

3. **Compliance Policies**

4. **Resource Management Policies**

5. **Data Management Policies**

6. **Monitoring and Logging Policies**

7. **Disaster Recovery Policies**

## Example of Policy Differentiation: Policy Enforcement Levels

Policy enforcement may differ across environments:

- Dev/Test environments - More lenient enforcement to allow for rapid iteration and experimentation
- Staging/Pre-Prod environments - Stricter enforcement to closely mirror production
- Production environment - Strictest enforcement to ensure stability and compliance

## Questions for Discussion

## Next Steps

## References

- DPD_Environments_Domains.md
- DPD_Environments_Definitions.md
- Industry standards for IT governance (e.g., COBIT, ITIL)
- Regulatory compliance frameworks relevant to our organization

## Action Items and Outstanding Research

## Decision Outcome

[To be filled after the decision is made]

---

# Environment Definitions and Purposes

## Introduction

This Decision Preparation Document (DPD) defines the different environments required for our software development lifecycle, platform services, and product delivery. It outlines the purpose, usage guidelines, and key requirements for each environment type. This document aligns with the proposed domain structure from DPD_Environments_Domains.md and the policy types outlined in DPD_Environments_Policy_Types.md.

## Scope

The purpose of this document is to introduce the first phase of environment definition and to establish a general purpose statement for each environment. This initial proposal aims to put in place the most basic decisions to allow for further refinements of environment requirements, design, and usage. While this document may mention examples and suggestions for environment qualities and functions, it is not intended to be an exhaustive or final definition. Future iterations will refine these definitions as more specific and granular requirements, policies, and discussions continue around these environments. We are not attempting to address all possible scenarios or requirements in this initial phase.

## Impact

Clear environment definitions will:

- Improve understanding of each environment's purpose
- Guide resource allocation and policy creation
- Enhance the platform team's ability to meet internal customer needs
- Streamline software development and delivery processes

## Key Considerations

- Alignment with proposed domain structure
- Distinct purpose and usage guidelines for each environment
- Meeting internal customer needs
- Scalability and flexibility of definitions

## Stakeholders

| Stakeholder | Role/Department |
| ----------- | --------------- |
|             |                 |

## Background Information

Clear environment definitions are crucial for supporting the software development lifecycle and platform services. These definitions guide the creation, management, and use of each environment type. Without explicit definitions, teams often infer an environment's purpose and requirements from its name and industry common practices. This can lead to misunderstandings, as interpretations may vary significantly between individuals, resulting in ambiguity and confusion.

## Environment Definitions

**All Environments Unless Otherwise Stated**

- **Key Requirements**:
  - Pprovisioning and deprovisioning through 100% Infrastructure as Code (IaC)
  - Integration with version control and CI systems
  - **Policy Compliance**:
    - Adheres to lifecycle hooks for compliance examination via Policy as Code
    - Policy enforcement is lenient; warnings are shown instead of hard stops
    - Overrides are easier to achieve and may be self-admissible for certain activities
  - **Operational Control**:
    - Cloud API permissions allow for operational controls without compromising IaC integrity
    - Users may start/stop compute or database instances, adjust autoscaling parameters
    - Users cannot create or delete resources outside of IaC processes

1. **Development Environment (Dev)**

   - **Purpose**: For rapid iteration and initial integration
   - **Usage Guidelines**: Allow for experimentation with basic safety measures; flexible policy enforcement
   - **Key Requirements**:
     - Provisioning and deprovisioning through 100% Infrastructure as Code (IaC)
     - Flexible configuration
     - Integration with version control and CI systems
     - **Policy Compliance**:
       - Adheres to lifecycle hooks for compliance examination via Policy as Code
     - **Operational Control**:
       - Limited operational controls permitted
       - Users may perform certain actions with appropriate permissions without compromising IaC integrity

2. **Quality Assurance Environment (QA)**

   - **Purpose**: For thorough testing and validation
   - **Usage Guidelines**: Mirror production while allowing controlled testing; moderate policy enforcement flexibility
   - **Key Requirements**:
     - Provisioning and deprovisioning through 100% Infrastructure as Code (IaC)
     - Configuration is more stable and less flexible than Dev
     - Isolation from development and production
     - **Operational Control**:
       - Limited operational controls permitted
       - Users may perform certain actions with appropriate permissions without compromising IaC integrity

3. **Pre-Production Environment (PreProd)**

   - **Purpose**: For final validation before production deployment
   - **Usage Guidelines**: Exact production replica for final checks; strict policy enforcement
   - **Key Requirements**:
     - Identical to production configuration managed through IaC
     - Full performance capabilities
     - Complete security measures
     - Realistic data volumes
     - Load testing and performance tuning support
     - Restricted access
     - **Policy Compliance**:
       - Full compliance enforced via Policy as Code
       - No policy violations tolerated; any violation results in deployment failure
     - **Operational Control**:
       - Operational changes are highly controlled
       - Changes are managed exclusively through IaC processes
       - Users cannot modify resources outside of IaC workflows

4. **Production Environment (Prod)**

   - **Purpose**: For hosting live services for end-users
   - **Usage Guidelines**: Maintain high availability, performance, and security; strictest policy enforcement
   - **Key Requirements**:
     - High availability and scalability for peak loads
     - Robust security measures
     - Comprehensive monitoring and alerting
     - Disaster recovery capabilities
     - Strict change management
     - Regulatory compliance
     - **Policy Compliance**:
       - Full compliance enforced via Policy as Code
       - No policy violations tolerated; any violation results in deployment failure
     - **Operational Control**:
       - Operational changes are highly controlled
       - All changes managed exclusively through IaC
       - Users cannot modify resources outside of IaC workflows

## Questions for Discussion

## Next Steps

## References

- DPD_Environments_Domains.md
- Industry best practices for environment management in software development
- Organizational compliance and security requirements

## Action Items and Outstanding Research

## Decision Outcome
